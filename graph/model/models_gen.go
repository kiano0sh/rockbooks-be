// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Author struct {
	ID    int64   `json:"id"`
	Name  string  `json:"name"`
	Books []*Book `json:"books"`
}

type Book struct {
	ID        int64      `json:"id"`
	Name      string     `json:"name"`
	Author    *Author    `json:"author"`
	Publisher *Publisher `json:"publisher"`
	CreatedAt string     `json:"createdAt"`
}

type BookAudio struct {
	ID           int64  `json:"id"`
	CreatedBy    *User  `json:"createdBy"`
	Audio        string `json:"audio"`
	Book         *Book  `json:"book"`
	CursorStarts int    `json:"cursorStarts"`
	CursorEnds   int    `json:"cursorEnds"`
	CreatedAt    string `json:"createdAt"`
}

type BookPage struct {
	ID         int64  `json:"id"`
	Content    string `json:"content"`
	PageNumber int    `json:"pageNumber"`
}

type BookPagesWithPagination struct {
	Pagination *PaginationType `json:"pagination"`
	BookPages  []*BookPage     `json:"bookPages"`
}

type BooksWithPagination struct {
	Pagination *PaginationType `json:"pagination"`
	Books      []*Book         `json:"books"`
}

type CreateAuthorInput struct {
	Name string `json:"name"`
}

type CreateBookAudioInput struct {
	Audio        string `json:"audio"`
	BookID       int64  `json:"bookId"`
	CursorStarts int    `json:"cursorStarts"`
	CursorEnds   int    `json:"cursorEnds"`
}

type CreateBookInput struct {
	Name        string         `json:"name"`
	AuthorID    int64          `json:"authorId"`
	PublisherID int64          `json:"publisherId"`
	BookFile    graphql.Upload `json:"bookFile"`
}

type CreatePublisherInput struct {
	Name string `json:"name"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type PaginationInput struct {
	Limit     *int           `json:"limit"`
	Page      *int           `json:"page"`
	SortOrder *SortOrderEnum `json:"sortOrder"`
	SortBy    *SortByEnum    `json:"sortBy"`
}

type PaginationType struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
	Total int `json:"total"`
}

type Publisher struct {
	ID    int64   `json:"id"`
	Name  string  `json:"name"`
	Books []*Book `json:"books"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type RegisterInput struct {
	DisplayName string `json:"displayName"`
	Email       string `json:"email"`
	Password    string `json:"password"`
}

type UpdateAuthorInput struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

type UpdateBookAudioInput struct {
	ID           int64  `json:"id"`
	Audio        string `json:"audio"`
	BookID       int64  `json:"bookId"`
	CursorStarts int    `json:"cursorStarts"`
	CursorEnds   int    `json:"cursorEnds"`
}

type UpdateBookInput struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	AuthorID    int64  `json:"authorId"`
	PublisherID int64  `json:"publisherId"`
}

type UpdatePublisherInput struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

type User struct {
	DisplayName string  `json:"displayName"`
	Email       string  `json:"email"`
	Avatar      *string `json:"avatar"`
}

type SortByEnum string

const (
	SortByEnumID        SortByEnum = "Id"
	SortByEnumCreatedAt SortByEnum = "CreatedAt"
	SortByEnumUpdatedAt SortByEnum = "UpdatedAt"
)

var AllSortByEnum = []SortByEnum{
	SortByEnumID,
	SortByEnumCreatedAt,
	SortByEnumUpdatedAt,
}

func (e SortByEnum) IsValid() bool {
	switch e {
	case SortByEnumID, SortByEnumCreatedAt, SortByEnumUpdatedAt:
		return true
	}
	return false
}

func (e SortByEnum) String() string {
	return string(e)
}

func (e *SortByEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortByEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortByEnum", str)
	}
	return nil
}

func (e SortByEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrderEnum string

const (
	SortOrderEnumAsc  SortOrderEnum = "ASC"
	SortOrderEnumDesc SortOrderEnum = "DESC"
)

var AllSortOrderEnum = []SortOrderEnum{
	SortOrderEnumAsc,
	SortOrderEnumDesc,
}

func (e SortOrderEnum) IsValid() bool {
	switch e {
	case SortOrderEnumAsc, SortOrderEnumDesc:
		return true
	}
	return false
}

func (e SortOrderEnum) String() string {
	return string(e)
}

func (e *SortOrderEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrderEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrderEnum", str)
	}
	return nil
}

func (e SortOrderEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
