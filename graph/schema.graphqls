scalar Upload

# Queries definition
type Query {
  self: User!
  authors: [Author]
  author(id: ID!): Author!
  publishers: [Publisher]
  pages(id: ID!, pagination: Pagination): [BookPage]
  audios(id: ID!): [BookAudio]
  publisher(id: ID!): Publisher!
  books: [Book]
  book(id: ID!): Book!
}

# Mutations definition
type Mutation {
  register(input: RegisterInput!): String!
  login(input: LoginInput!): String!
  refreshToken(input: RefreshTokenInput!): String!
  createBook(input: CreateBookInput!): Book!
  updateBook(input: UpdateBookInput!): Book!
  deleteBook(id: ID!): Boolean!
  createBookAudio(input: CreateBookAudioInput!): BookAudio!
  updateBookAudio(input: UpdateBookAudioInput!): BookAudio!
  deleteBookAudio(id: ID!): Boolean!
  createAuthor(input: CreateAuthorInput!): Author!
  updateAuthor(input: UpdateAuthorInput!): Author!
  deleteAuthor(id: ID!): Boolean!
  createPublisher(input: CreatePublisherInput!): Publisher!
  updatePublisher(input: UpdatePublisherInput!): Publisher!
  deletePublisher(id: ID!): Boolean!
}

# Pagination
input Pagination {
  Limit: Int
  Page: Int
}

# Users
type User {
  displayName: String!
  email: String!
  avatar: String
}

input RegisterInput {
  displayName: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RefreshTokenInput {
  token: String!
}

# Authors
type Author {
  id: ID!
  name: String!
  books: [Book!]
}

input CreateAuthorInput {
  name: String!
}

input UpdateAuthorInput {
  id: ID!
  name: String!
}

# Publishers
type Publisher {
  id: ID!
  name: String!
  books: [Book!]
}

input CreatePublisherInput {
  name: String!
}

input UpdatePublisherInput {
  id: ID!
  name: String!
}

# BookAudios
type BookAudio {
  createdBy: User!
  audio: String!
  book: Book!
  cursorStarts: Int!
  cursorEnds: Int!
  createdAt: String!
}

input CreateBookAudioInput {
  audio: String!
  bookId: ID!
  cursorStarts: Int!
  cursorEnds: Int!
}

input UpdateBookAudioInput {
  id: ID!
  audio: String!
  bookId: ID!
  cursorStarts: Int!
  cursorEnds: Int!
}

# BookPages
type BookPage {
  content: String!
  pageNumber: Int!
}

# Books
type Book {
  name: String!
  author: Author!
  publisher: Publisher!
  createdAt: String!
}

input CreateBookInput {
  name: String!
  authorId: ID!
  publisherId: ID!
  bookFile: Upload!
}

input UpdateBookInput {
  id: ID!
  name: String!
  authorId: ID!
  publisherId: ID!
}
